// Generated by CoffeeScript 1.10.0
(function() {
  var Connection, Grid, MongoDBConnection, mongo,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  mongo = require("mongodb");

  Grid = require("gridfs-stream");

  Connection = require('../Connection');

  MongoDBConnection = (function(superClass) {
    extend(MongoDBConnection, superClass);

    function MongoDBConnection() {
      return MongoDBConnection.__super__.constructor.apply(this, arguments);
    }

    MongoDBConnection.prototype.connect = function(callback) {
      var mongodb;
      mongodb = new mongo.Db(this.settings.pathname.replace('/', ''), new mongo.Server(this.settings.host || "127.0.0.1", this.settings.port || 27017, {
        w: 1
      }));
      return mongodb.open((function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          _this.connection = Grid(mongodb, mongo);
          return callback();
        };
      })(this));
    };

    MongoDBConnection.prototype.close = function(callback) {
      return callback();
    };

    MongoDBConnection.prototype.saveStream = function(stream, id, callback) {
      var bytesWrite, writeStream;
      writeStream = this.connection.createWriteStream({
        _id: id,
        mode: 'w'
      });
      bytesWrite = 0;
      stream.on("data", function(chunk) {
        bytesWrite += chunk.length;
        return writeStream.write(chunk);
      });
      stream.on("end", function() {
        if (bytesWrite === 0) {
          return callback(new Error("no bytes sent"));
        }
        return writeStream.end();
      });
      writeStream.on("close", function(file) {
        file.id = file._id.toString();
        return callback(null, file);
      });
      writeStream.on("error", function(err) {
        return callback(err);
      });
    };

    MongoDBConnection.prototype.getStream = function(id, callback) {
      var gs;
      id = (id.toHexString ? id : this.connection.tryParseObjectId(id));
      gs = new mongo.GridStore(this.connection.db, id, "r");
      gs.open(function(err, gs) {
        if (err) {
          return callback(err);
        }
        callback(null, gs.stream(true), gs.length);
      });
    };

    MongoDBConnection.prototype.remove = function(id, callback) {
      id = (id.toHexString ? id : this.connection.tryParseObjectId(id));
      this.connection.remove({
        _id: id
      }, callback);
    };

    return MongoDBConnection;

  })(Connection);

  module.exports = MongoDBConnection;

}).call(this);
