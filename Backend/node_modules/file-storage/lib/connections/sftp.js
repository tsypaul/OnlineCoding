// Generated by CoffeeScript 1.10.0
(function() {
  var Connection, FTPConnection, path, ssh,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ssh = require('ssh2');

  path = require('path');

  Connection = require('../Connection');

  FTPConnection = (function(superClass) {
    extend(FTPConnection, superClass);

    function FTPConnection() {
      return FTPConnection.__super__.constructor.apply(this, arguments);
    }

    FTPConnection.prototype.connect = function(callback) {
      this.connection = new ssh();
      this.connection.connect(this.settings);
      return this.connection.once('ready', (function(_this) {
        return function() {
          return _this.connection.sftp(function(err, client) {
            if (err) {
              return callback(err);
            }
            _this.client = client;
            return callback();
          });
        };
      })(this));
    };

    FTPConnection.prototype.close = function(callback) {
      this.client.end();
      return callback();
    };

    FTPConnection.prototype.saveStream = function(stream, id, callback) {
      var writeStream;
      writeStream = this.client.createWriteStream(this.getPath(id));
      stream.pipe(writeStream);
      stream.on('error', callback);
      return stream.on('end', function() {
        return callback(null, {
          id: id
        });
      });
    };

    FTPConnection.prototype.getStream = function(id, callback) {
      var stream;
      stream = this.client.createReadStream(this.getPath(id));
      return callback(null, stream);
    };

    FTPConnection.prototype.remove = function(id, callback) {
      return this.client.unlink(this.getPath(id), callback);
    };

    return FTPConnection;

  })(Connection);

  module.exports = FTPConnection;

}).call(this);
