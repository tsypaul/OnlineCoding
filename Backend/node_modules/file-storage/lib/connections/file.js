// Generated by CoffeeScript 1.10.0
(function() {
  var Connection, FileConnection, Lock, Promise, fs, lock, path,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  fs = require("fs");

  path = require('path');

  Lock = require('lock');

  Promise = require('bluebird');

  Connection = require('../Connection');

  lock = Lock();

  FileConnection = (function(superClass) {
    extend(FileConnection, superClass);

    function FileConnection() {
      return FileConnection.__super__.constructor.apply(this, arguments);
    }

    FileConnection.prototype.connect = function() {
      return Promise["try"]((function(_this) {
        return function() {
          if (!_this.settings.path) {
            throw new Error("settings.path must be specified");
          }
        };
      })(this));
    };

    FileConnection.prototype.close = function() {};

    FileConnection.prototype.ensureDirectory = function(id) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var callback, dir, filename, rootDir;
          callback = function(err) {
            if (err) {
              return reject(err);
            }
            return resolve();
          };
          filename = _this.getPath(id);
          rootDir = _this.getPath();
          dir = path.dirname(filename);
          if (dir === rootDir) {
            return callback();
          }
          return lock(dir, function(release) {
            callback = release(callback);
            return fs.exists(dir, function(exists) {
              if (exists) {
                return callback();
              }
              return fs.mkdir(dir, callback);
            });
          });
        };
      })(this));
    };

    FileConnection.prototype.saveStream = function(stream, id) {
      return this.ensureDirectory(id).then((function(_this) {
        return function() {
          return _this._saveStream(stream, id);
        };
      })(this));
    };

    FileConnection.prototype._saveStream = function(stream, id) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var writeStream;
          writeStream = fs.createWriteStream(_this.getPath(id));
          stream.on("end", function() {
            return resolve({
              id: id
            });
          });
          stream.on("error", function(err) {
            return reject(err);
          });
          return stream.pipe(writeStream);
        };
      })(this));
    };

    FileConnection.prototype.getStream = function(id) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var filename;
          filename = _this.getPath(id);
          return fs.exists(filename, function(exists) {
            if (!exists) {
              return reject(new Error('record ' + id + ' doesn\'t exists'));
            }
            return resolve(fs.createReadStream(filename));
          });
        };
      })(this));
    };

    FileConnection.prototype.remove = function(id) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return fs.unlink(_this.getPath(id), function(err) {
            if (err) {
              return reject(err);
            }
            return resolve();
          });
        };
      })(this));
    };

    return FileConnection;

  })(Connection);

  module.exports = FileConnection;

}).call(this);
