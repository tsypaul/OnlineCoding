// Generated by CoffeeScript 1.10.0
(function() {
  var Connection, Downloader, RackspaceConnection, Uploader, pkgcloud,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Uploader = require('s3-streaming-upload').Uploader;

  Downloader = require('s3-download-stream');

  pkgcloud = require('pkgcloud');

  Connection = require('../Connection');

  RackspaceConnection = (function(superClass) {
    extend(RackspaceConnection, superClass);

    function RackspaceConnection() {
      return RackspaceConnection.__super__.constructor.apply(this, arguments);
    }

    RackspaceConnection.prototype.connect = function(callback) {
      this.client = pkgcloud.storage.createClient({
        provider: 'rackspace',
        username: this.settings.user,
        apiKey: this.settings.password,
        region: this.settings.region || 'IAD',
        useInternal: this.settings.usingInternal || false
      });
      return callback();
    };

    RackspaceConnection.prototype.close = function(callback) {
      return callback();
    };

    RackspaceConnection.prototype.saveStream = function(stream, id, callback) {
      var writeStream;
      writeStream = this.client.upload({
        container: this._containerName(),
        remote: id
      });
      writeStream.on('error', callback);
      writeStream.on('success', function(file) {
        return callback(null, {
          id: id
        });
      });
      return stream.pipe(writeStream);
    };

    RackspaceConnection.prototype.getStream = function(id, callback) {
      var stream;
      stream = this.client.download({
        container: this._containerName(),
        remote: id
      });
      return callback(null, stream);
    };

    RackspaceConnection.prototype.remove = function(id, callback) {
      return this.client.removeFile(this._containerName(), id, callback);
    };

    RackspaceConnection.prototype._containerName = function() {
      return this.settings.host.replace(/\//g, '');
    };

    return RackspaceConnection;

  })(Connection);

  module.exports = RackspaceConnection;

}).call(this);
