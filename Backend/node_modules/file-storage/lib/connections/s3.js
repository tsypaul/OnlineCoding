// Generated by CoffeeScript 1.10.0
(function() {
  var Connection, Promise, S3Connection, aws, fs, mime,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  aws = require('aws-sdk');

  fs = require('fs');

  mime = require('mime-types');

  Promise = require('bluebird');

  Connection = require('../Connection');

  S3Connection = (function(superClass) {
    extend(S3Connection, superClass);

    function S3Connection() {
      return S3Connection.__super__.constructor.apply(this, arguments);
    }

    S3Connection.prototype.connect = function() {
      this.client = new aws.S3({
        accessKeyId: this._getKeyId(),
        secretAccessKey: this._getSecretKey(),
        signatureVersion: this._getSignatureVersion(),
        region: this._getRegion(),
        logger: process.env.FILE_STORAGE_S3_LOGGING ? process.stdout : null
      });
      return Promise.resolve();
    };

    S3Connection.prototype.close = function() {
      return Promise.resolve();
    };

    S3Connection.prototype.saveStream = function(stream, id) {
      return this._saveObject(stream, id);
    };

    S3Connection.prototype.saveData = function(data, id) {
      return this._saveObject(data, id);
    };

    S3Connection.prototype._saveObject = function(object, id) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var upload;
          upload = new aws.S3.ManagedUpload({
            service: _this.client,
            params: {
              Bucket: _this._bucketName(),
              Key: _this.getPath(id),
              Body: object,
              ContentType: mime.lookup(id) || 'application/octet-stream'
            }
          });
          return upload.send(function(err, info) {
            if (info) {
              info.id = id;
            }
            if (err) {
              return reject(err);
            }
            return resolve(info);
          });
        };
      })(this));
    };

    S3Connection.prototype.getStream = function(id) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var stream;
          stream = _this.client.getObject({
            Bucket: _this._bucketName(),
            Key: _this.getPath(id)
          }).createReadStream();
          stream.on('error', reject);
          return stream.once('readable', function() {
            return resolve(stream);
          });
        };
      })(this));
    };

    S3Connection.prototype.remove = function(id) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.client.deleteObject({
            Key: _this.getPath(id),
            Bucket: _this._bucketName()
          }, function(err, result) {
            if (err) {
              return reject(err);
            }
            return resolve(result);
          });
        };
      })(this));
    };

    S3Connection.prototype.getPath = function() {
      var path;
      path = S3Connection.__super__.getPath.apply(this, arguments);
      path = path.substring(1);
      return path;
    };

    S3Connection.prototype._partSize = function() {
      return this.settings.partSize || 1 * 1024 * 1024;
    };

    S3Connection.prototype._queueSize = function() {
      return this.settings.queueSize || 5;
    };

    S3Connection.prototype._getRegion = function() {
      return this.settings.region;
    };

    S3Connection.prototype._getSignatureVersion = function() {
      return this.settings.signatureVersion || 'v4';
    };

    S3Connection.prototype._bucketName = function() {
      return this.settings.host || this.settings.bucket;
    };

    S3Connection.prototype._getKeyId = function() {
      return this.settings.user || this.settings.accessKeyId;
    };

    S3Connection.prototype._getSecretKey = function() {
      return this.settings.password || this.settings.secretAccessKey;
    };

    return S3Connection;

  })(Connection);

  module.exports = S3Connection;

}).call(this);
